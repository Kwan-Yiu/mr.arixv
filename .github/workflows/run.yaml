# GitHub Actions workflow name
name: Daily arXiv Paper Downloader

# Workflow trigger conditions
on:
  # Allow manual trigger from GitHub repository Actions page
  workflow_dispatch:
  
  # Scheduled trigger
  schedule:
    # Use CRON expression, runs daily at 18:00 UTC (2:00 AM Beijing/Singapore time)
    # minute hour day month weekday
    - cron: '0 18 * * *'

# Define a series of tasks to execute
jobs:
  # Task ID
  download:
    # Virtual environment for task execution, using latest Ubuntu system
    runs-on: ubuntu-latest

    # Steps included in the task
    steps:
      # Step 1: Checkout code
      # This action downloads your repository code to the virtual environment
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      # Use actions/setup-python to configure specified Python version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # You can specify the required Python version

      # Step 3: Install dependencies
      # Run pip install command to install libraries according to requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Step 4: Run your Python script
      - name: Run the downloader script
        run: python main.py

      # Step 5: Commit and push changes
      # Save newly downloaded PDFs and updated log files back to repository
      - name: Commit and push changes
        run: |
          # Configure git user information
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add generated files to staging area
          # Note: If too many papers are downloaded, it may make your repository very large
          git add ${{ env.OUTPUT_DIR }}
          
          # Check if there are file changes, if no changes then don't commit
          if ! git diff --staged --quiet; then
            git commit -m "CI: Daily arXiv paper update"
            git push
          else
            echo "No new papers found or an error occurred. Nothing to commit."
          fi
        env:
          # Pass output directory variable from script to this step
          OUTPUT_DIR: arxiv_vector_search_papers_2025
